#include "stdio.h"
#include "unistd.h"
#include "string.h"
#include "stdlib.h"
#include "sys/socket.h"
#include "netdb.h"
#include "iostream"
#include <fstream>
#include <ostream>
#include <fcntl.h>

using namespace std;
const char *aa = NULL;
typedef struct s_l
{
	int id;
	char msg[1024];
}t_clients;

t_clients clients[1024];
fd_set readfds, writefds, mainfds;

int max_fd = 0, k = 0;

char bufferWrite[120000], bufferRead[120000];

void	err_msg(char *s)
{
	if (s)
		write(2, s, strlen(s));
	else
		write(2, "Fatal error", strlen("Fatal error"));
	write(2, "\n", 1);
	exit(1);
}

void	sendAll(int a)
{
	std::cout << "WriteBuffer:   " << bufferWrite << endl;
	for (int i = 0 ; i <= max_fd; i++)
	{
		if (FD_ISSET(i, &writefds) && i != a)
			send(i, aa, strlen(aa), 0);
	}
}

int main(int ac, char **av)
{
	if (ac != 2)
		err_msg("Wrong number of argument");

	char buff[4096];
    std::fstream file;
	file.open("a.html");
	string ress = "";
	char c;
	while (!file.eof())
    {
        file >> std::noskipws >> c;
        ress += c;
    }
	aa = ress.c_str();
    file.close();
	int sockfd = socket(AF_INET, SOCK_STREAM, 0);
	if (sockfd < 0)
		err_msg(NULL);

	FD_ZERO(&mainfds);
	max_fd = sockfd;
	FD_SET(sockfd, &mainfds);
	bzero(&clients, sizeof(clients));

	struct sockaddr_in	serv_addr;
	socklen_t			len;
	bzero(&serv_addr, sizeof(serv_addr));

	serv_addr.sin_port = (htons(atoi(av[1])));
	serv_addr.sin_family = AF_INET;
	serv_addr.sin_addr.s_addr = htonl(2130706433);

	if (bind(sockfd, (const struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)
		err_msg(NULL);
	if (listen(sockfd, 10) < 0)
		err_msg(NULL);

	while (1)
	{
		readfds = writefds = mainfds;
		if (select(max_fd + 1, &readfds, &writefds, NULL, NULL) < 0)
			continue;
		for (int idx = 0; idx <= max_fd; idx++)
		{
			if (FD_ISSET(idx, &readfds) && idx == sockfd)
			{
				int new_fd = accept(sockfd, (struct sockaddr *)&serv_addr, &len);
				if (new_fd < 0)
					continue;
				FD_SET(new_fd, &mainfds);
				max_fd = new_fd > max_fd ? new_fd : max_fd;
				clients[new_fd].id = k++;
				sprintf(bufferWrite, "server: client %d just arrived\n", clients[new_fd].id);
				sendAll(new_fd);
				break;
			}
			if (FD_ISSET(idx, &readfds) && idx != sockfd)
			{
				int res = recv(idx, bufferRead, 65536, 0);
				if (res <= 0)
				{
					sprintf(bufferWrite, "server: client %d just left\n", clients[idx].id);
					sendAll(idx);
					FD_CLR(idx, &mainfds);
					close(idx);
					break;
				}
				else
				{
					for (int i = 0, j = strlen(clients[idx].msg); i < res; i++, j++)
					{
						clients[idx].msg[j] = bufferRead[i];
						if (clients[idx].msg[j] == '\n')
						{
							clients[idx].msg[j] = '\0';
							sprintf(bufferWrite, "client %d: %s", clients[idx].id,clients[idx].msg);
							sendAll(idx);
							bzero(&clients[idx].msg, strlen(clients[idx].msg));
							j = -1;
						}
					}
					break;
				}
			}
		}
	}
}
